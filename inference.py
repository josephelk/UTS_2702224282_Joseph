# -*- coding: utf-8 -*-
"""inference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eIN2gBmkYjoA4Ds4REO369mXDHGT6qHe
"""

import pandas as pd
import pickle
from typing import Dict, Union

class BookingInference:
    def __init__(self, model_path: str):
        """
        Initialize inference pipeline

        Args:
            model_path: Path to saved .pkl model file
        """
        self.model = self._load_model(model_path)
        self.required_features = {
            'numerical': ['no_of_adults', 'no_of_children', 'no_of_weekend_nights',
                         'no_of_week_nights', 'lead_time', 'no_of_previous_cancellations',
                         'no_of_previous_bookings_not_canceled', 'avg_price_per_room',
                         'no_of_special_requests', 'required_car_parking_space',
                         'total_nights', 'total_guests'],
            'categorical': ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type',
                          'repeated_guest', 'booking_season']
        }

    def _load_model(self, model_path: str):
        """Load trained model from pickle file"""
        with open(model_path, 'rb') as f:
            return pickle.load(f)

    def preprocess_input(self, input_data: Dict[str, Union[int, float, str]]) -> pd.DataFrame:
        """
        Preprocess raw input data to match model requirements

        Args:
            input_data: Dictionary of input features (key: feature name, value: feature value)

        Returns:
            Processed DataFrame ready for prediction
        """
        # Convert to DataFrame
        df = pd.DataFrame([input_data])

        # Feature engineering (same as training)
        df['total_nights'] = df['no_of_weekend_nights'] + df['no_of_week_nights']
        df['total_guests'] = df['no_of_adults'] + df['no_of_children']

        # Ensure all required columns exist
        for col in self.required_features['numerical'] + self.required_features['categorical']:
            if col not in df.columns:
                raise ValueError(f"Missing required feature: {col}")

        return df[self.required_features['numerical'] + self.required_features['categorical']]

    def predict(self, input_data: Dict[str, Union[int, float, str]]) -> Dict[str, Union[str, float]]:
        """
        Make prediction on new data

        Args:
            input_data: Dictionary of input features

        Returns:
            Dictionary containing prediction and probability
        """
        try:
            # Preprocess input
            processed_data = self.preprocess_input(input_data)

            # Make prediction
            prediction = self.model.predict(processed_data)[0]
            proba = self.model.predict_proba(processed_data)[0][1]

            return {
                'prediction': 'Canceled' if prediction == 1 else 'Not Canceled',
                'probability': float(proba),
                'status': 'success'
            }
        except Exception as e:
            return {
                'prediction': None,
                'probability': None,
                'status': f'error: {str(e)}'
            }

# Example Usage (for testing)
if __name__ == "__main__":
    # Initialize inference engine
    inferencer = BookingInference('hotel_booking_cancellation_model.pkl')

    # Sample input (replace with actual values)
    sample_input = {
        'no_of_adults': 2,
        'no_of_children': 0,
        'no_of_weekend_nights': 1,
        'no_of_week_nights': 2,
        'lead_time': 30,
        'no_of_previous_cancellations': 0,
        'no_of_previous_bookings_not_canceled': 0,
        'avg_price_per_room': 100.0,
        'no_of_special_requests': 1,
        'required_car_parking_space': 0,
        'type_of_meal_plan': 'Meal Plan 1',
        'room_type_reserved': 'Room_Type 1',
        'market_segment_type': 'Online',
        'repeated_guest': 0,
        'arrival_month': 7  # Will be converted to season
    }

    # Get prediction
    result = inferencer.predict(sample_input)
    print("Prediction Result:", result)